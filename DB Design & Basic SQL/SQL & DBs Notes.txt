DATA TYPES
    String fields (Char, Varchar)
    Text fields (Text - generally not used with indexing and sorting)
    binary fields [blobs] (BYTEA - not indexed/sorted or widely used)
    numerical fields 
        - integer numbers (SMALLINT(32768), INTEGER(2Billion), BIGINT(10^18ish))
        - floating point (REAL (32bit), DOUBLE PRECISION(64bit), NUMERIC(specify))
        - time (TIMESTAMP, DATE, TIME) [built in psql function NOW()]
    auto_increment fields


KEYS & INDEXES
    *auto_increment*
    DROP TABLE <name>;

    CREATE TABLE <name> (
        id SERIAL,
        name VARCHAR(128) not null,
        email VARCHAR(128) UNIQUE,
        artist_id INTEGER REFERENCES artist(id) ON DELETE CASCADE,
        ...,
        UNIQUE(email, artist_id),
        PRIMARY KEY(id)  
    );

    Trees & Hashes most common indexes
    B-tree(binary/balanced) (logarithmic amortized time)
    Data Ranges
    Hashes - Great for exact matches, and GUID (not sorted)

    \copy track_raw(title,artist,album,count,rating,len) FROM 'library.csv' WITH DELIMITER ',' CSV;


RELATIONAL DB DESIGN
    Data model - drawing picture of how all the data and tables works and connects in a database, 
                 showing their relationships, never put the same string twice
    
    Is this column an object, or an attribute of another object? After defining objects we need to define the relationships between them


KEYS    
    primary key - generally integer auto increment field
    logical key - key outside world uses for lookup
    foreign key - generally integer key pointing to the primary key in another table (all of them being integers are great)

    never use your logical key as the primary key
    logical keys can and do change
    relationships based on matching string fields are less efficient than integers


DB NORMALIZATION
    do not replicate data, reference it (foreign keys)
    use integers for keys and references
    add a special "key" column to each table, which you will make references to


USING JOIN
    links across several tables as part of select operation
    must tell JOIN how to use the keys that make a connection using the ON clause

    SELECT <tablex>.<column>, ..., FROM <table1> JOIN <table2> ON <table1>.<column> = <table2>.<column>
    FROM <name1> CROSS JOIN <name2>; (doesn't need ON, showing all possible combinations)

    regular join --> inner join

    ON DELETE
        Default/RESTRICT - Don't allow changes that break the constraint 
        CASCADE - Adjust child rows by removing or updating to maintian consistency
        SET NULL - Set the foreign key columns in the child rows to NULL


MANY-TO-MANY-RELATIONSHIPS
    ex: a member can include a studentID and a courseID, many students to many courses 

    CREATE TABLE member (
        student_id INTEGER REFERENCES student(id) ON DELETE CASCADE,
        course_id  INTEGER REFERENCES course(id) ON DELETE CASCADE,
        role       INTEGER,
        PRIMARY KEY (student_id, course_id)
    );

    this example has no id, and its primary key is both a student_id and course_id, but this will not always be the case, ex: comments
