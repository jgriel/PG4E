ALTERING TABLE SCHEMA
    ALTER TABLE <table_name> DROP COLUMN <col_name>;
                       ALTER COLUMN <col_name> TYPE <type>;  
                       ADD COLUMN <col_name> <type>;

    Execute Commands from .sql File: \i <file-path>

DATES
    Types:
        DATE
        TIME
        TIMESTAMP (time & date)
        TIMESTAMPTZ (with time zone)
        NOW() (PostgreSQL) --> DEFAULT NOW() when creating table

    Able to cast: NOW()::DATE || CAST(NOW() AS DATE), 
    Date interval arithmetic: NOW() - INTERVAL '2 days'

DISTINCT / GROUP BY
    DISTINCT - only shows unique rows once
    DISTINCT ON - limits duplicate removal to a set of columns
    GROUP BY = combined with aggregate functions COUNT(), MAX(), SUM(), AVG(), etc...

SUBQUERIES
    Query within a Query
    Don't use it too much (slow)
    SELECT <columns> FROM (<subquery) WHERE ...;

CONCURRENCY & TRANSACTIONS 
    
        UPDATE column
        SET attrib = attrib + 1
        WHERE id = x
    
    BECOMES
    
        LOCK ROW x of column
        READ attrib FROM column ROW x
        attrib = attrib + 1
        WRITE attrib TO column ROW x
        UNLOCK ROW x OF column

    Compound Statements - do more than one thing in one statement
    
        INSERT INTO <column> (headers)
            VALUES (...)
            ON CONFLICT (headers)    // Similar to a try-catch
            DO UPDATE SET attrib = column.attrib + x
        RETURNING *;  

    lock strength UPDATE, NO KEY UPDATE
    when encounting a lock, (WAIT), NOWAIT, SKIP LOCKED    

STORED PROCEDURES
    Reusable code that runs inside of the database server (instead of the client just querying and querying and querying)
    Multiple languages choices, but just use "PL/pgSQL"
    Generally not portable
    Goal is to have fewer SQL statements
    Need STRONG reason to use them
